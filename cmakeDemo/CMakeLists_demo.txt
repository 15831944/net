CMAKE_MINIMUM_REQUIRED(VERSION 2.8)

PROJECT(myEngine)

SET(CMAKE_BUILE_TYPE Debug)
SET(COMP_FLAGS "-ggdb -Wall")

#SET(LINK_LIB_PATH "${CMAKE_SOURCE_DIR}")
#include_directories("./")

message(status " PROJECT_NAME = ${PROJECT_NAME} ")
message(status " CMAKE_BUILE_TYPE= ${CMAKE_BUILE_TYPE} ")
message(status " COMP_FLAGS = ${COMP_FLAGS} ")


FILE(GLOB_RECURSE SRC_LIST "*.cpp")

FOREACH(src ${SRC_LIST})
message(status "${src} ")
ENDFOREACH()


ADD_LIBRARY( ${PROJECT_NAME} STATIC ${SRC_LIST} )

SET_TARGET_PROPERTIES(${PROJECT_NAME}
		PROPERTIES 
		COMPILE_FLAGS ${COMP_FLAGS}
)

message(status "${PROJECT_SOURCE_DIR}")
INCLUDE_DIRECTORIES($({PROJECT_SOURCE_DIR}/include))

SET(EXECUTABLE_OUTPUT_PATH ${PROJECT_SOURCE_DIR}/bin)
ADD_EXECUTABLE(hello test.cpp Hello.cpp)

SET(LIBRARY_OUT_PATH ${PROJECT_SOURCE_DIR}/lib)
ADD_LIBRARY(hello_so SHARED Hello.cpp)
SET_TARGET_PROPERTIES(hello_so PROPERTIES OUTPUT_NAME "hello")


ADD_LIBRARY(hello_a STATIC Hello.cpp)
SET_TARGET_PROPERTIES(hello_a PROPERTIES OUTPUT_NAME "hello")

MESSAGE(STATUS $ENV{HOME}) #显示系统的HOME环境变量的值
# 注意，这里指定绝对路径。  
INCLUDE_DIRECTORIES($ENV{HOME}/workspace/HelloWorld/include)  
# 指定库文件查找目录（不能只指定头文件，也需要连接到库文件）  
# 注意，这里指定绝对路径, 也可通过设置系统环境变量LD_LIBRARY_PATH来指定。  
LINK_DIRECTORIES($ENV{HOME}/workspace/HelloWorld/lib)  
# 生成可执行文件到项目的bin目录  
SET(EXECUTABLE_OUTPUT_PATH ${PROJECT_SOURCE_DIR}/bin)  
ADD_EXECUTABLE(main main.cpp)  
# 制定链接的外部Lib  
TARGET_LINK_LIBRARIES(main libhello.a)  

#message(status "${SRC_LIST}")